---
# https://sc1.checkpoint.com/documents/R81.10/WebAdminGuides/EN/CP_R81.10_Maestro_AdminGuide/Topics-Maestro-AG/Upgrading-Maestro-with-CPUSE.htm?tocpath=Upgrading%20Maestro%20to%20R81.10%7C_____1
- name: "Step 8 -  Import the R81.10 upgrade package on the Security Group"
  hosts: sg
  gather_facts: false

  tasks:

    - name: "Step 8 - Debug / Prepare to import package"
      debug: msg="Prepare to import package {{ pkg_upgrade_R81 }}"
      when: loglevel>0

    - name: "Import package"
      include_tasks: include/import_package.yml
      vars:
        package_name: "{{ pkg_upgrade_R81 }}"
        # logical_member: "{{ logicalAmember }}"

### Validate for memberA and memberB
# ! no fault yet

    - name: "Get pkg_index"
      include_tasks: include/get_pkg_index.yml
      vars:
        package_file_name: "{{ pkg_upgrade_R81 }}"
        logical_member: "{{ logicalAmember }}"

    - name: "Get pkg_index"
      include_tasks: include/get_pkg_index.yml
      vars:
        package_file_name: "{{ pkg_upgrade_R81 }}"
        logical_member: "{{ logicalBmember }}"

# da_cli packages_info status=available_for_install
# and find index, status

#     - name: "Temporary stop"
#       meta: end_play


# ### Import package

#     - name: "Timestamp / Start importing package"
#       include_tasks: ./include/print_datetime.yml
#       when: loglevel>=2

#     - name: "Import package"
#       include_tasks: include/import_package.yml
#       vars:
#         package_name: "{{ pkg_upgrade_R81 }}"
#         # logical_member: "{{ logicalAmember }}"

#     - name: "Show imported packages"
#       shell: gclish -c "show installer packages imported"
#       register: res
#       changed_when: false
#       # da_cli packages_info status=available_for_install

#     - name: "Debug / Show imported packages"
#       debug: msg="{{ res.stdout_lines }}"
#       when: loglevel>=2

#     # ! Find package index

#     - name: "Timestamp / After importing package"
#       include_tasks: ./include/print_datetime.yml
#       when: loglevel>=2

#     - name: "Verify installer"
#       shell: gclish -c "installer verify 1"
#       register: res_verify
#       changed_when: false

#     - name: "Check if all required SGMs allowed"
#       shell: "echo {{ res_verify.stdout_lines }} | grep -v -i 'not'"
#       register: res
#       changed_when: false
#       ignore_errors: true

#     - name: "Verify installer failed - break!"
#       fail:
#         msg:
#           - "Oops. Already installed? Not in sync? Break installation."
#           - "{{ res_verify.stdout_lines }}"
#       when: res.rc == 1
#       # ! Need better error handling ?

#     - name: "Debug / Verify installer - OK"
#       debug:
#         msg: "{{ res_verify.stdout_lines }}"
#       when: res.rc == 0

# da_cli import package=<name> [location=<location>]
# da_cli download package=<name>
# da_cli verify package=<name>
# da_cli install package=<name> [reboot_delay=<time in seconds>]
# da_cli clean_install package=<name> [reboot_delay=<time in seconds>]
# da_cli upgrade package=<name> [reboot_delay=<time in seconds>]
# da_cli uninstall package=<name> [reboot_delay=<time in seconds>]
# da_cli package_info package=<name>
# da_cli add_private_package package=<name>
# da_cli packages_info [status=<all|available|available_for_download|available_for_install|installed|recommended|visible>]
# da_cli get_status_of_action actionID=<id>
# da_cli da_status
# da_cli is_pending_reboot
# da_cli cancel_reboot_delay
# da_cli get_version
# da_cli collect_logs [destination=<full file path | destination directory>]
# da_cli upgrade_tools_update_status
# da_cli update_upgrade_tools
# da_cli skipped_install
# da_cli show_progress [progress_file=<file name>]
# da_cli edit_configuration
