### Compare count of Installed against of the total SGMs number (all_ids)
- name: "Set base_package_fn"
  set_fact:
    base_package_fn: "{{ jhf[:-4] }}"
    # to avoid mess with tar and tgz

- name: "Check Installed"
  shell: >
    set -o pipefail &&
    gexec -a -g0 -c 'da_cli packages_info'
    | jq '[ .packages[] | select(.filename | startswith("{{ base_package_fn }}")) | .state ]' | grep -c "Installed";
    asg stat -i all_ids | wc -l
  register: res
  ignore_errors: true
  changed_when: false

- name: "Debug / Installed vs all_ids (include/install_jhf.yml)"
  debug: msg="{{ res.stdout_lines }}"
  when: loglevel>=2

- name: "End play. JHF already installed on all members (include/install_jhf.yml)"
  meta: end_play
  when: res.stdout_lines[0] | int == res.stdout_lines[1] | int
  ignore_errors: true

### Some info
- name: "get SMO_IP"
  shell: hostname -i
  register: res
  changed_when: false

- name: "Store SMO_IP"
  set_fact:
    smo_ip: "{{ res.stdout }}"

- name: "Debug / SMO_IP (include/install_JHF.yml)"
  debug:
    msg: "{{ smo_ip }}"
  ignore_errors: true
  when: loglevel>=2


### Import package

- name: "clear import_to_member"
  set_fact:
    import_to_member: ""

- name: "set import_to_member to verify"
  set_fact:
    import_to_member: "member_ids {{ logical_range }}"
  when:
    - logical_range is defined
    - not is_first | default(false)

- name: "Debug / Prepare to import package (include/install_JHF.yml)"
  debug:
    msg:
      - "Prepare to import package {{ jhf }}"
      - "on {{ smo_ip }} {{ import_to_member }}"
  when: loglevel>0

- name: "Timestamp / Start importing package"
  include_tasks: ./include/print_datetime.yml
  when: loglevel>=2

- name: "Import package (include/install_JHF.yml)"
  include_tasks: include/import_package.yml
  vars:
    package_name: "{{ jhf }}"

- name: "Show imported packages"
  shell: gclish -c "show installer packages"
  register: res
  changed_when: false

- name: "Debug / Show imported packages (include/install_JHF.yml)"
  debug: msg="{{ res.stdout_lines }}"
  when: loglevel>=2


# Let's switch to the proper SMO first (shutdown SGM to be upgarded)

- name: "clusterXL down for the logical group"
  delegate_to: 127.0.0.1
  expect:
    command: "sshpass -p {{ ansible_ssh_pass }} ssh -t {{ ansible_ssh_user }}@{{ inventory_hostname }} g_clusterXL_admin -b {{ logical_range }} down"
    responses:
      'Are you sure': "y"
      'Enter your full name:': 'Ansible'
      'Enter reason for': "Automated Upgrade"
    timeout: 20
    echo: true
  register: res
  ignore_errors: true
  ignore_unreachable: true

- name: "Debug / clusterXL down (include/install_JHF.yml)"
  debug: msg="{{ res.stdout_lines }}"
  ignore_errors: true
  when: loglevel>=3

- name: Establish new connection (in case of SMO switch)
  # switch on g_clusterXL down for group A
  wait_for_connection:
    timeout: 600
  register: res
  ignore_unreachable: true
  ignore_errors: true

- name: "get SMO_IP"
  shell: hostname -i
  register: res
  changed_when: false
  ignore_unreachable: true

- name: "Store SMO_IP"
  set_fact:
    smo_ip: "{{ res.stdout }}"

- name: "Debug / SMO_IP just before JHF install (include/install_JHF.yml)"
  debug:
    msg: "{{ smo_ip }}"
  ignore_errors: true
  when: loglevel>1


### Find package index and verify

- name: "Get pkg_index"
  include_tasks: include/get_pkg_index.yml
  vars:
    package_file_name: "{{ jhf }}"
    # logical_member: "{{ Inherited }}"

- name: "Timestamp / After importing package"
  include_tasks: ./include/print_datetime.yml
  when: loglevel>=2

# - name: "Verify installer (include/install_JHF.yml)"
#   shell: gclish -b "{{ logical_member }}" -c "installer verify {{ pkg_index }} {{ import_to_member }}"
#   register: res_verify
#   changed_when: false
#   ignore_errors: true

- name: "Verify installer (include/install_JHF.yml)"
  delegate_to: 127.0.0.1
  expect:
    command: "sshpass -p {{ ansible_ssh_pass }} ssh -t {{ ansible_ssh_user }}@{{ inventory_hostname }} member {{ logical_member }}"
    responses:
      '\:0]#': "gclish -c \"installer verify {{ pkg_index }} {{ import_to_member }}\"; exit"
  register: res_verify
  ignore_errors: true
  ignore_unreachable: true

- name: "Debug / installer verify as is (include/install_JHF.yml)"
  debug: msg="{{ res_verify }}"
  when: loglevel>=3

- name: "Timestamp / installer verified"
  include_tasks: ./include/print_datetime.yml
  when: loglevel>=3

- name: "Check if all required SGMs allowed"
  shell: echo '{{ res_verify.stdout }}' | egrep -v -i "not|doesn't"
  register: res
  changed_when: false
  ignore_errors: true

- name: "Verify installer failed - break! (include/install_JHF.yml)"
  fail:
    msg:
      - "Oops. Already installed? Not in sync? Break installation."
      - "{{ res_verify.stdout_lines }}"
  when: res.rc == 1
  # ! Need better error handling ?

- name: "Debug / Verify installer - OK (include/install_JHF.yml)"
  debug:
    msg: "{{ res_verify.stdout_lines }}"
  when: res.rc == 0


### Start installation

- name: "Get pkg_index"
  include_tasks: include/get_pkg_index.yml
  vars:
    package_file_name: "{{ jhf }}"
    # logical_member: "{{ Inherited }}"

- name: "Install JHF by switching to the affected member"
  delegate_to: 127.0.0.1
  expect:
    command: "sshpass -p {{ ansible_ssh_pass }} ssh -t {{ ansible_ssh_user }}@{{ inventory_hostname }} member {{ logical_member }}"
    responses:
      '\:0]#': "gclish -c \"installer install {{ pkg_index }} member_ids {{ logical_range }}\""
      'Do you want to continue': "y"
      'Are you sure': "y"
      'You are about to perform': "y"
      'Enter your full name:': 'Ansible'
      'Enter reason for': "Automated Upgrade"
    timeout: 60
    echo: true
  register: res
  ignore_errors: true
  ignore_unreachable: true


# ! Check for "Package index doesn't exist on the local member ('1')"

- name: "Debug / JHF install in progress (include/install_JHF.yml)"
  debug:
    msg:
      - "JHF install in progress for {{ logical_range }} {{ import_to_member }}"
      - "intitiated on {{ smo_ip }}"
  ignore_errors: true
  when: loglevel>0

- name: "Returned from install, start waiting for reboot"
  include_tasks: ./include/print_datetime.yml
  when: loglevel>=2


  # upgrade of the logicalA (with SMO) causes disconnect.
  # maybe two disconnects (SMO switches to B and then back)

  # wait for asg stat -i sgm_info all ACTIVE (Inactive disappeared) or disconnected
  # watch -n 5 "asg stat -i proc | grep -A 5 'SGM ID'"
  # Maybe count `asg stat -i active_ids`
  # ! Add timeout to the loop !

- name: "Establish new connection (in case of SMO switch)"
  wait_for_connection:
    timeout: 600
  register: res
  ignore_unreachable: true
  ignore_errors: true

- name: "get SMO_IP"
  shell: hostname -i
  register: res
  changed_when: false
  ignore_unreachable: true
  ignore_errors: true

- name: "Debug / SMO_IP before waiting for all active (include/install_JHF.yml)"
  debug:
    msg: "{{ res.stdout }}"
  ignore_errors: true
  when: loglevel>0

- name: "Wait for all Active"
  shell: while [ $(asg stat -i sgm_info | grep -c Inactive) -ne 0 ]; do printf "."; sleep 10; done
  changed_when: false
  ignore_errors: true
  ignore_unreachable: true
  register: res
  # ! Normal return or disconnect first?

- name: "Debug / Return from waiting reboot (include/install_JHF.yml)"
  debug:
    msg:
      - "Rebooted and all active, range {{ logical_range }} / {{ import_to_member }}"
      - "{{ res }}"
  ignore_errors: true
  when: loglevel>1

- name: Establish new connection (in case of SMO switch)
  wait_for_connection:
    timeout: 600
  ignore_unreachable: true
  ignore_errors: true

- name: "get SMO_IP"
  shell: hostname -i
  register: res
  changed_when: false
  ignore_unreachable: true
  ignore_errors: true

- name: "Debug / SMO_IP after all active (include/install_JHF.yml)"
  debug:
    msg: "{{ res.stdout }}"
  when: loglevel>1
  ignore_errors: true

- name: "Reboot completed (include/install_JHF.yml)"
  include_tasks: ./include/print_datetime.yml
  when: loglevel>=2
